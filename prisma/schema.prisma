generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
  contacts      Contact[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id                  String            @id @default(cuid())
  company             String
  position            String
  location            String?
  status              ApplicationStatus @default(WISHLIST)
  appliedAt           DateTime          @default(now())
  notes               String?
  salaryMin           Int?
  salaryMax           Int?
  applicationUrl      String?
  contactName         String?
  contactEmail        String?
  contactPhone        String?
  companySize         CompanySize?
  industry            String?
  applicationDeadline DateTime?

  userId     String
  user       User        @relation(fields: [userId], references: [id])
  contactId  String?
  contact    Contact?    @relation(fields: [contactId], references: [id])
  interviews Interview[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Contact {
  id        String  @id @default(cuid())
  firstName String
  lastName  String?
  email     String?
  phone     String?
  jobTitle  String?
  company   String?
  linkedIn  String?
  notes     String?

  userId       String
  user         User          @relation(fields: [userId], references: [id])
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Interview {
  id       String          @id @default(cuid())
  date     DateTime
  time     String?
  type     InterviewType
  location String?
  notes    String?
  duration Int?
  round    Int?            @default(1)
  status   InterviewStatus @default(SCHEDULED)

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum ApplicationStatus {
  WISHLIST
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum InterviewType {
  PHONE
  VIDEO
  ONSITE
  VIRTUAL
  GROUP
  TECHNICAL
  BEHAVIORAL
  FINAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}
